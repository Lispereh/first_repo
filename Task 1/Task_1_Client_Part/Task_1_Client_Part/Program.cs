using System;
using System.Net; // Пространство имен для работы с сетевыми адресами и протоколами.
using System.Net.Sockets; // Пространство имен для работы с сокетами и сетевыми соединениями.
using System.Text; // Пространство имен для работы с кодировками текста, такими как UTF-8.

class TimeClient // Объявляем класс TimeClient, который будет содержать основной код клиента.
{
    static void Main() // Определяем статический метод Main, который является точкой входа в программу.
    {
        int port = 11000; // Определяем порт, к которому будет привязан сокет. Используем порт выше 1024.
        using (UdpClient udpClient = new UdpClient()) // Создаем новый экземпляр UdpClient для работы с UDP-соединениями.
        {
            try // Начинаем блок try для обработки возможных исключений.
            {
                // Устанавливаем опцию сокета, позволяющую повторное использование адреса, чтобы избежать ошибок при повторной привязке.
                udpClient.Client.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReuseAddress, true);

                // Привязываем сокет к адресу (в данном случае ко всем доступным адресам) и указанному порту.
                udpClient.Client.Bind(new IPEndPoint(IPAddress.Any, port));

                // Выводим сообщение в консоль о том, что клиент запущен и ожидает сообщения от сервера.
                Console.WriteLine("Клиент запущен. Ожидание времени от сервера...");

                while (true) // Бесконечный цикл для постоянного ожидания сообщений от сервера.
                {
                    // Создаем новый объект IPEndPoint для получения данных от любого удаленного адреса на указанном порту.
                    IPEndPoint remoteEP = new IPEndPoint(IPAddress.Any, port);

                    // Ожидаем получения данных от удаленного отправителя и сохраняем их в массиве байтов.
                    byte[] data = udpClient.Receive(ref remoteEP);

                    // Преобразуем полученные байты в строку с использованием кодировки UTF-8.
                    string currentTime = Encoding.UTF8.GetString(data);

                    // Выводим полученное время в консоль.
                    Console.WriteLine($"Получено время: {currentTime}");
                }
            }
            catch (SocketException ex) // Обрабатываем исключение, если возникла ошибка сокета.
            {
                // Выводим сообщение об ошибке в консоль, если произошла ошибка при работе с сокетом.
                Console.WriteLine($"Ошибка сокета: {ex.Message}");
            }
        } // Блок using автоматически освобождает ресурсы, связанные с udpClient, когда он выходит из области видимости.
    }
}